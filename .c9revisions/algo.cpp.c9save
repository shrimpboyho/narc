{"ts":1374773646448,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":false,"ts":1374773678151,"patch":[[{"diffs":[[1,"#include \"algo.h\""]],"start1":0,"start2":0,"length1":0,"length2":17}]],"length":17,"saved":false}
{"contributors":[],"silentsave":false,"ts":1374859489601,"patch":[[{"diffs":[[0,"\"algo.h\""],[1,"\n#include <iostream>\n\n#include <vector>\n\nAlgo::Algo(int input_given){\n    \n    \n    \n}"]],"start1":9,"start2":9,"length1":8,"length2":94}]],"length":103,"saved":false}
{"ts":1374859534973,"patch":[[{"diffs":[[0,"){\n    \n    "],[1,"std::cout << \"Recieved array: \" << input_given[0] << input_given[1] << input_given[2] << input_given[3] << input_given[4];"],[0,"\n    \n}"]],"start1":84,"start2":84,"length1":19,"length2":141}]],"length":225,"saved":false}
{"ts":1374859552761,"patch":[[{"diffs":[[0,"<vector>"],[1,"\n#include <algorithm>"],[0,"\n\nAlgo::"]],"start1":48,"start2":48,"length1":16,"length2":37}]],"length":246,"saved":false}
{"ts":1374859597890,"patch":[[{"diffs":[[0,"ut_given"],[1,"[]"],[0,"){\n    \n"]],"start1":97,"start2":97,"length1":16,"length2":18}]],"length":248,"saved":false}
{"ts":1374859767668,"patch":[[{"diffs":[[0,";\n    \n}"],[1,"\n\nstd::string Algo::getAnswer(){\n    \n}"]],"start1":240,"start2":240,"length1":8,"length2":47}]],"length":287,"saved":false}
{"ts":1374860161037,"patch":[[{"diffs":[[0,"swer(){\n    "],[1,"return \"sample string\";"],[0,"\n}"]],"start1":273,"start2":273,"length1":14,"length2":37}]],"length":310,"saved":false}
{"contributors":[],"silentsave":false,"ts":1374860427952,"patch":[[{"diffs":[[0,"];\n    \n"],[1,"    // Set up permutations\n    \n    std::sort (myints,myints+5);\n    \n"],[0,"}\n\nstd::"]],"start1":239,"start2":239,"length1":16,"length2":86}]],"length":380,"saved":false}
{"contributors":[],"silentsave":false,"ts":1374874311939,"patch":[[{"diffs":[[0,"_given[]"],[1,",int finalNum"],[0,"){\n    \n"]],"start1":99,"start2":99,"length1":16,"length2":29}]],"length":393,"saved":false}
{"ts":1374874347575,"patch":[[{"diffs":[[0," << "],[-1,"input_given[4]"],[1,"endl;\n    std::cout << \"Calculating to: \" << finalNum << endl"],[0,";\n  "]],"start1":235,"start2":235,"length1":22,"length2":69}]],"length":440,"saved":false}
{"ts":1374874356974,"patch":[[{"diffs":[[0,"td::sort"],[-1," "],[0,"(myints,"]],"start1":344,"start2":344,"length1":17,"length2":16}]],"length":439,"saved":false}
{"ts":1374874480658,"patch":[[{"diffs":[[0,"ort("],[-1,"myints,myints+5)"],[1,"input_given, input_given +4);\n    \n    do {\n        std::cout << input_given[0] << ' ' << input_given[1] << ' ' << input_given[2] << ' ' << input_given[3] << '\\n';\n    } while ( std::next_permutation(myints,myints+3) );\n\n    std::cout << \"After loop: \" << myints[0] << ' ' << myints[1] << ' ' << myints[2] << '\\n'"],[0,";\n  "]],"start1":349,"start2":349,"length1":24,"length2":321}]],"length":736,"saved":false}
{"ts":1374874502541,"patch":[[{"diffs":[[0,"p: \" << "],[-1,"myints"],[1,"input_given"],[0,"[0] << '"]],"start1":601,"start2":601,"length1":22,"length2":27},{"diffs":[[0," ' ' << "],[-1,"myints"],[1,"input_given"],[0,"[1] << '"]],"start1":626,"start2":626,"length1":22,"length2":27},{"diffs":[[0," << "],[-1,"myints[2] "],[1,"input_given[2] << ' ' << input_given[3]"],[0,"<< '"]],"start1":655,"start2":655,"length1":18,"length2":47}]],"length":775,"saved":false}
{"ts":1374874551275,"patch":[[{"diffs":[[0,"given[3] << "],[1,"std::"],[0,"endl;\n    st"]],"start1":227,"start2":227,"length1":24,"length2":29},{"diffs":[[0,"lNum << "],[1,"std::"],[0,"endl;\n  "]],"start1":293,"start2":293,"length1":16,"length2":21},{"diffs":[[0,"ion("],[-1,"myints,myints+3"],[1,"input_given, input_given + 4"],[0,") );"]],"start1":559,"start2":559,"length1":23,"length2":36}]],"length":798,"saved":false}
{"ts":1374874660502,"patch":[[{"diffs":[[0,"lNum){\n    \n"],[1,"    vector <vector<int>> numPermutations;\n    vector <vector<int>> opPermutations;\n    \n"],[0,"    std::cou"]],"start1":116,"start2":116,"length1":24,"length2":112}]],"length":886,"saved":false}
{"ts":1374874663140,"patch":[[{"diffs":[[0,"<vector<"],[1,"str"],[0,"in"],[-1,"t"],[1,"g"],[0,">> opPer"]],"start1":181,"start2":181,"length1":19,"length2":22}]],"length":889,"saved":false}
{"ts":1374874667088,"patch":[[{"diffs":[[0,"<vector<"],[1,"std::"],[0,"string>>"]],"start1":181,"start2":181,"length1":16,"length2":21}]],"length":894,"saved":false}
{"ts":1374874738815,"patch":[[{"diffs":[[0,":cout <<"],[1," \"Pushing in: \" <<"],[0," input_g"]],"start1":515,"start2":515,"length1":16,"length2":34}]],"length":912,"saved":false}
{"ts":1374874989538,"patch":[[{"diffs":[[0,"    "],[-1,"vector <"],[1,"struct point{\n        int num1;\n        int num2;\n        int num3,\n        int num4;\n    };\n    \n    "],[0,"vector"],[-1,"<"],[1," <po"],[0,"int>"],[-1,">"],[0," num"]],"start1":128,"start2":128,"length1":28,"length2":124},{"diffs":[[0,"3] << '\\n';\n"],[1,"        \n        point p;\n        p.num1 = input_given[0];\n        p.num2 = input_given[1];\n        p.num3 = input_given[2];\n        p.num4 = input_given[3];\n        \n        numPermutations.push_back(p);\n        \n"],[0,"    } while "]],"start1":725,"start2":725,"length1":24,"length2":238}]],"length":1222,"saved":false}
{"ts":1374875051665,"patch":[[{"diffs":[[0,"rithm>\n\n"],[1,"using namespace std;\n\n"],[0,"Algo::Al"]],"start1":71,"start2":71,"length1":16,"length2":38}]],"length":1244,"saved":false}
{"ts":1374875070002,"patch":[[{"diffs":[[0,"int num3"],[-1,","],[1,";"],[0,"\n       "]],"start1":212,"start2":212,"length1":17,"length2":17}]],"length":1244,"saved":false}
{"ts":1374875100775,"patch":[[{"diffs":[[0,"ns;\n"],[-1,"    vector <vector<std::string>> opPermutations;\n"],[0,"    "]],"start1":284,"start2":284,"length1":57,"length2":8}]],"length":1195,"saved":false}
{"ts":1374875196944,"patch":[[{"diffs":[[0,"d;\n\n"],[-1,"Algo::Algo(int input_given[],int finalNum){\n    \n    "],[0,"stru"]],"start1":97,"start2":97,"length1":61,"length2":8},{"diffs":[[0," point{\n"],[-1,"    "],[0,"    int "]],"start1":107,"start2":107,"length1":20,"length2":16},{"diffs":[[0,"t num1;\n    "],[-1,"  "],[-1,"  "],[0,"int num2;\n  "]],"start1":121,"start2":121,"length1":28,"length2":24},{"diffs":[[0,"t num2;\n    "],[-1,"  "],[-1,"  "],[0,"int num3;\n  "]],"start1":135,"start2":135,"length1":28,"length2":24},{"diffs":[[0,"m3;\n    "],[-1,"  "],[-1,"  "],[0,"int num4"]],"start1":153,"start2":153,"length1":20,"length2":16},{"diffs":[[0,"m4;\n"],[-1,"    };"],[1,"};\n\nAlgo::Algo(int input_given[],int finalNum){"],[0,"\n   "]],"start1":167,"start2":167,"length1":14,"length2":55}]],"length":1167,"saved":false}
{"ts":1374875266360,"patch":[[{"diffs":[[0,"    "],[-1,"vector <point> numPermutations;"],[0,"\n   "]],"start1":224,"start2":224,"length1":39,"length2":8},{"diffs":[[0,"swer(){\n"],[1,"    \n    \n"],[0,"    retu"]],"start1":1099,"start2":1099,"length1":16,"length2":26}]],"length":1146,"saved":false}
{"ts":1374875297936,"patch":[[{"diffs":[[0,"d;\n\n"],[-1,"struct point{\n    int num1;\n    int num2;\n    int num3;\n    int num4;\n};\n\n"],[0,"Algo"]],"start1":97,"start2":97,"length1":82,"length2":8}]],"length":1072,"saved":false}
{"ts":1374875324668,"patch":[[{"diffs":[[0,"\n       "],[1," this ->"],[0," numPerm"]],"start1":743,"start2":743,"length1":16,"length2":24}]],"length":1080,"saved":false}
{"contributors":[],"silentsave":false,"ts":1374932351694,"patch":[[{"diffs":[[0,"swer(){\n    "],[1,"int i;\n    \n    // Print out all the permuations\n    cout << \"Testing: \";\n    \n    for(){\n        \n    }"],[0,"\n    \n    re"]],"start1":1033,"start2":1033,"length1":24,"length2":128}]],"length":1184,"saved":false}
{"ts":1374932359544,"patch":[[{"diffs":[[0,"   \n"],[-1,"    for(){\n        \n    }"],[0,"\n   "]],"start1":1120,"start2":1120,"length1":33,"length2":8}]],"length":1159,"saved":false}
{"contributors":[],"silentsave":false,"ts":1375018565511,"patch":[[{"diffs":[[0,"ng: "],[1,"\\n"],[0,"\";\n    "],[-1,"\n"],[1,"for(i = 0; i < this -> numPermutations.size(); i++){\n        cout << numPermutations[i].num1 << ' ' << numPermutations[i].num2 << ' ' << numPermutations[i].num3 << ' ' << numPermutations[i].num4 << '\\n'\n    }"],[0,"\n   "]],"start1":1112,"start2":1112,"length1":16,"length2":225}]],"length":1368,"saved":false}
{"ts":1375018612545,"patch":[[{"diffs":[[0," << '\\n'"],[1,";"],[0,"\n    }\n "]],"start1":1319,"start2":1319,"length1":16,"length2":17}]],"length":1369,"saved":false}
{"ts":1375018741836,"patch":[[{"diffs":[[0,"}\n\nstd::"],[1,"vector<"],[0,"string"],[1,">"],[0," Algo::g"]],"start1":1007,"start2":1007,"length1":22,"length2":30},{"diffs":[[0,"rn \""],[-1,"sample"],[1,"answer"],[0," str"]],"start1":1356,"start2":1356,"length1":14,"length2":14}]],"length":1377,"saved":false}
{"ts":1375018779737,"patch":[[{"diffs":[[0,"(){\n    "],[-1,"int i"],[1,"\n    int i;\n    vector <string> answerSlots"],[0,";\n    \n "]],"start1":1045,"start2":1045,"length1":21,"length2":59},{"diffs":[[0,"urn "],[-1,"\""],[0,"answer"],[-1," string\""],[1,"Slots"],[0,";\n}"]],"start1":1393,"start2":1393,"length1":22,"length2":18}]],"length":1411,"saved":false}
{"ts":1375018833086,"patch":[[{"diffs":[[0,":endl;\n    \n"],[1,"    // Set up final size\n    \n    this -> goal = finalNum;\n    \n"],[0,"    // Set u"]],"start1":337,"start2":337,"length1":24,"length2":88}]],"length":1475,"saved":false}
{"ts":1375018853833,"patch":[[{"diffs":[[0,"m){\n    "],[-1,"\n    \n  "],[0,"  \n    s"]],"start1":141,"start2":141,"length1":24,"length2":16},{"diffs":[[0,"    "],[-1,"std::cout << \"Calculating to: \" << finalNum << std::endl;\n    \n    // Set up final size\n    \n    this -> goal = finalNum"],[1,"\n    // Set up final size\n    \n    this -> goal = finalNum;\n    std::cout << \"Calculating to: \" << this -> goal << std::endl"],[0,";\n  "]],"start1":274,"start2":274,"length1":128,"length2":132}]],"length":1471,"saved":false}
{"ts":1375019102476,"patch":[[{"diffs":[[0,"permutations"],[1," for numbers"],[0,"\n    \n    st"]],"start1":423,"start2":423,"length1":24,"length2":36},{"diffs":[[0,"';\n    \n"],[1,"    // Set up permutations for operators\n    \n    string operatorBank[4] = {\"+\",\"-\",\"*\",\"/\"};\n"],[0,"}\n\nstd::"]],"start1":1071,"start2":1071,"length1":16,"length2":110}]],"length":1577,"saved":false}
{"ts":1375019252890,"patch":[[{"diffs":[[0,"\",\"/\"};\n"],[1,"    \n     do {\n        \n        string currentPerm = operatorBank[0] + operatorBank[1] + operatorBank[2] + operatorBank[3];\n        \n        this -> opPermutations.push_back(currentPerm);\n        \n    } while ( std::next_permutation(operatorBank, operatorBankn + 4) );\n"],[0,"}\n\nstd::"]],"start1":1165,"start2":1165,"length1":16,"length2":285},{"diffs":[[0,"uations\n"],[1,"    \n"],[0,"    cout"]],"start1":1567,"start2":1567,"length1":16,"length2":21},{"diffs":[[0,"g: \\n\";\n"],[1,"    \n"],[0,"    for("]],"start1":1599,"start2":1599,"length1":16,"length2":21},{"diffs":[[0,"; i++){\n"],[-1,""],[0,"        "]],"start1":1661,"start2":1661,"length1":16,"length2":16},{"diffs":[[0,"\n    }\n    \n"],[1,"    for(i = 0; i < this -> opPermutations.size(); i++){\n        cout << opPermutations[i] << '\\n';\n    }\n    \n"],[0,"    return a"]],"start1":1819,"start2":1819,"length1":24,"length2":134}]],"length":1966,"saved":false}
{"ts":1375019291632,"patch":[[{"diffs":[[0,"atorBank"],[-1,"n"],[0," + 4) );"]],"start1":1424,"start2":1424,"length1":17,"length2":16}]],"length":1965,"saved":false}
{"ts":1375019349847,"patch":[[{"diffs":[[0,"\n    }\n    \n"],[1,"    /* TODO: Begin the proccess of testing stuff here */\n    \n"],[0,"    return a"]],"start1":1928,"start2":1928,"length1":24,"length2":86}]],"length":2027,"saved":false}
{"ts":1375019383343,"patch":[[{"diffs":[[0,"m>\n\n"],[-1,"using namespace std;"],[0,"\n\nAl"]],"start1":75,"start2":75,"length1":28,"length2":8},{"diffs":[[0,"ns\n    \n    "],[1,"std::"],[0,"cout << \"Tes"]],"start1":1551,"start2":1551,"length1":24,"length2":29},{"diffs":[[0,"; i++){\n        "],[1,"std::"],[0,"cout << numPermu"]],"start1":1645,"start2":1645,"length1":32,"length2":37},{"diffs":[[0,"        "],[1,"std::"],[0,"cout << "]],"start1":1876,"start2":1876,"length1":16,"length2":21}]],"length":2022,"saved":false}
{"ts":1375019484385,"patch":[[{"diffs":[[0,"rithm>\n\n"],[-1,"\n\n"],[0,"Algo::Al"]],"start1":71,"start2":71,"length1":18,"length2":16}]],"length":2020,"saved":false}
{"contributors":[],"silentsave":false,"ts":1375118212881,"patch":[[{"diffs":[[0,"ere */\n    \n"],[1,"    for(i = 0; i < numPermutations.size(); i++){\n        \n        \n        \n    }\n    \n"],[0,"    return a"]],"start1":1983,"start2":1983,"length1":24,"length2":111}]],"length":2107,"saved":false}
{"ts":1375118781431,"patch":[[{"diffs":[[0," int i;\n"],[1,"    int k;\n"],[0,"    vect"]],"start1":1469,"start2":1469,"length1":16,"length2":27},{"diffs":[[0,"       \n        "],[1,"for(k = 0; k < opPermutations.size(); i++){\n            string testy = std::to_string(numPermutations[i].num1) + opPermutations[i].at(0) + std::to_string(numPermutations[i].num2) + opPermutations[i].at(1) + std::to_string(numPermutations[i].num3) + opPermutations[i].at(2) + std::to_string(numPermutations[i].num4) + opPermutations[i].at(3);\n            cout << testy << std::endl;\n        }"],[0,"\n        \n    }\n"]],"start1":2056,"start2":2056,"length1":32,"length2":423}]],"length":2509,"saved":false}
{"ts":1375118909657,"patch":[[{"diffs":[[0,"testy = "],[-1,"std::"],[0,"to_strin"]],"start1":2135,"start2":2135,"length1":21,"length2":16},{"diffs":[[0,"[i].at(0) + "],[-1,"std::"],[0,"to_string(nu"]],"start1":2194,"start2":2194,"length1":29,"length2":24},{"diffs":[[0,"[i].at(1) + "],[-1,"std::"],[0,"to_string(nu"]],"start1":2257,"start2":2257,"length1":29,"length2":24},{"diffs":[[0,"at(2) + "],[-1,"std::"],[0,"to_strin"]],"start1":2324,"start2":2324,"length1":21,"length2":16}]],"length":2489,"saved":false}
{"ts":1375119085350,"patch":[[{"diffs":[[0,"Slots;\n}"],[1,"\n\nstring Algo::to_string(int number){\n    string number_string = \"\";\n    char ones_char;\n    int ones = 0;\n    while(true){\n        ones = number % 10;\n        switch(ones){\n            case 0: ones_char = '0'; break;\n            case 1: ones_char = '1'; break;\n            case 2: ones_char = '2'; break;\n            case 3: ones_char = '3'; break;\n            case 4: ones_char = '4'; break;\n            case 5: ones_char = '5'; break;\n            case 6: ones_char = '6'; break;\n            case 7: ones_char = '7'; break;\n            case 8: ones_char = '8'; break;\n            case 9: ones_char = '9'; break;\n            default : ;\n        }\n        number -= ones;\n        number_string = ones_char + number_string;\n        if(number == 0){\n            break;\n        }\n        number = number/10;\n    }\n    return number_string;\n}"]],"start1":2481,"start2":2481,"length1":8,"length2":846}]],"length":3327,"saved":false}
{"ts":1375119190162,"patch":[[{"diffs":[[0,"um4)"],[-1," + opPermutations[i].at(3)"],[0,";\n  "]],"start1":2362,"start2":2362,"length1":34,"length2":8}]],"length":3301,"saved":false}
{"ts":1375119242199,"patch":[[{"diffs":[[0,"tations.size(); "],[-1,"i"],[1,"k"],[0,"++){\n           "]],"start1":2094,"start2":2094,"length1":33,"length2":33},{"diffs":[[0,"ermutations["],[-1,"i"],[1,"k"],[0,"].at(0) + to"]],"start1":2183,"start2":2183,"length1":25,"length2":25},{"diffs":[[0,"ermutations["],[-1,"i"],[1,"k"],[0,"].at(1) + to"]],"start1":2246,"start2":2246,"length1":25,"length2":25},{"diffs":[[0,"tations["],[-1,"i"],[1,"k"],[0,"].at(2) "]],"start1":2313,"start2":2313,"length1":17,"length2":17}]],"length":3301,"saved":false}
{"contributors":[],"silentsave":false,"ts":1375132762459,"patch":[[{"diffs":[[0,"rBank + "],[1,"6"],[0,"4) );\n}\n"]],"start1":1405,"start2":1405,"length1":16,"length2":17}]],"length":3302,"saved":false}
{"ts":1375132791538,"patch":[[{"diffs":[[0,"rBank + "],[-1,"6"],[0,"4) );\n}\n"]],"start1":1405,"start2":1405,"length1":17,"length2":16}]],"length":3301,"saved":false}
{"ts":1375133731021,"patch":[[{"diffs":[[0," << "],[-1,"testy << std::endl"],[1,"\"Testing: \" << testy"],[0,";\n  "]],"start1":2384,"start2":2384,"length1":26,"length2":28}]],"length":3303,"saved":false}
{"ts":1375133935583,"patch":[[{"diffs":[[0,"ze(); k++){\n"],[1,"            \n"],[0,"            "]],"start1":2104,"start2":2104,"length1":24,"length2":37},{"diffs":[[0," testy;\n"],[1,"            \n            // Test the equation\n            \n            ExpressionParser<int> parser;\n            if(parser.eval(testy) == this-> goal){\n                \n            }\n            \n"],[0,"        "]],"start1":2415,"start2":2415,"length1":16,"length2":212}]],"length":3512,"saved":false}
{"ts":1375133971133,"patch":[[{"diffs":[[0,"                "],[1,"cout << \"SUCCESS\\n\";\n            }else{\n                cout << \"FAIL\\n\";"],[0,"\n            }\n "]],"start1":2575,"start2":2575,"length1":32,"length2":105}]],"length":3585,"saved":false}
{"ts":1375134037339,"patch":[[{"diffs":[[0,"gorithm>"],[1,"\n#include \"parser.h\""],[0,"\n\nAlgo::"]],"start1":69,"start2":69,"length1":16,"length2":36},{"diffs":[[0,"onParser"],[1," "],[0,"<int> pa"]],"start1":2522,"start2":2522,"length1":16,"length2":17}]],"length":3606,"saved":false}
{"ts":1375134100305,"patch":[[{"diffs":[[0,"out << \""],[1," "],[0,"SUCCESS\\"]],"start1":2613,"start2":2613,"length1":16,"length2":17},{"diffs":[[0,"out << \""],[1," "],[0,"FAIL\\n\";"]],"start1":2670,"start2":2670,"length1":16,"length2":17}]],"length":3608,"saved":false}
{"ts":1375219611365,"patch":[[{"diffs":[[0,"rators\n    \n"],[1,"    int operatorCount = 4;\n    int permutationLength = 3;\n"],[0,"    string o"]],"start1":1111,"start2":1111,"length1":24,"length2":82},{"diffs":[[0,"torBank["],[-1,"4"],[0,"] = {\"+\""]],"start1":1197,"start2":1197,"length1":17,"length2":16},{"diffs":[[0,"    "],[-1,"\n     do {\n        \n        string currentPerm = operatorBank[0] + "],[1,"int curIndex = 0;\n    getPermutations("],[0,"oper"]],"start1":1228,"start2":1228,"length1":75,"length2":46},{"diffs":[[0,"Bank"],[-1,"[1] + "],[1,","],[0,"operator"],[-1,"Bank[2] + operatorBank[3];"],[1,"Count,permutation,"],[0,"\n   "]],"start1":1278,"start2":1278,"length1":48,"length2":35},{"diffs":[[0,"    "],[-1,"\n"],[0,"        "],[-1,"this -> opPermutations.push_back(currentPerm);\n"],[1,"  "],[0,"        "],[-1,"\n"],[0,"    "],[-1,"} while ( std::next_permutation(operatorBank, operatorBank + 4) "],[1,"   permutationLength,curIndex"],[0,");\n}"]],"start1":1314,"start2":1314,"length1":141,"length2":59}]],"length":3541,"saved":false}
{"ts":1375219616803,"patch":[[{"diffs":[[0,"ion,"],[-1,"\n                                 "],[0,"perm"]],"start1":1305,"start2":1305,"length1":42,"length2":8}]],"length":3507,"saved":false}
{"ts":1375219712978,"patch":[[{"diffs":[[0,"ser.h\"\n\n"],[1,"void Algo::displayPermutation(string permutation[], int length){\n    int i;\n    for (i=0;i<length;i++){\n        cout<<permutation[i];\n    }\n    cout << endl;\n}\n\nvoid Algo::getPermutations(string operatorBank[], int operatorCount, \n        string permutation[],int permutationLength, int curIndex){\n    int i;\n    //stop recursion condition\n    if(curIndex == permutationLength){\n        displayPermutation(permutation,permutationLength);\n    }\n    else{\n        for(i = 0; i < operatorCount; i++){\n            permutation[curIndex] = operatorBank[i];\n            getPermutations(operatorBank,operatorCount,permutation,\n                permutationLength,curIndex+1);\n        }\n    }\n}\n\n"],[0,"Algo::Al"]],"start1":91,"start2":91,"length1":16,"length2":701}]],"length":4192,"saved":false}
{"ts":1375219735739,"patch":[[{"diffs":[[0,"vector>\n"],[1,"#include <math.h>\n"],[0,"#include"]],"start1":49,"start2":49,"length1":16,"length2":34}]],"length":4210,"saved":false}
{"ts":1375219819789,"patch":[[{"diffs":[[0,"d Algo::"],[-1,"display"],[1,"inject"],[0,"Permutat"]],"start1":120,"start2":120,"length1":23,"length2":22},{"diffs":[[0,"ength;i++){\n"],[1,"        this -> opPermutations.push\n"],[0,"        cout"]],"start1":208,"start2":208,"length1":24,"length2":60},{"diffs":[[0,"    "],[-1,"display"],[1,"inject"],[0,"Perm"]],"start1":535,"start2":535,"length1":15,"length2":14}]],"length":4244,"saved":false}
{"ts":1375219849556,"patch":[[{"diffs":[[0,"push"],[-1,"\n        cout<<"],[1,"_back("],[0,"perm"]],"start1":251,"start2":251,"length1":23,"length2":14},{"diffs":[[0,"ation[i]"],[1,")"],[0,";\n    }\n"]],"start1":267,"start2":267,"length1":16,"length2":17}]],"length":4236,"saved":false}
{"ts":1375219907410,"patch":[[{"diffs":[[0,"\",\"/\"};\n"],[1,"    string permutation[] = {\"\",\"\",\"\",\"\"};\n"],[0,"    int "]],"start1":1949,"start2":1949,"length1":16,"length2":58}]],"length":4278,"saved":false}
{"ts":1375220097790,"patch":[[{"diffs":[[0,"utation["],[-1,"i"],[1,"0] + permutation[1] + permutation[2"],[0,"]);\n    "]],"start1":265,"start2":265,"length1":17,"length2":51},{"diffs":[[0,"Count, \n"],[-1,"    "],[0,"    stri"]],"start1":401,"start2":401,"length1":20,"length2":16}]],"length":4308,"saved":false}
{"contributors":[],"silentsave":false,"ts":1375292139278,"patch":[[{"diffs":[[0,"  }\n"],[-1,"    cout << endl;\n"],[0,"}\n\nv"]],"start1":314,"start2":314,"length1":26,"length2":8},{"diffs":[[0,"ex);\n}\n\n"],[1,"/* Returns answers */\n\n"],[0,"std::vec"]],"start1":2116,"start2":2116,"length1":16,"length2":39},{"diffs":[[0,"SUCCESS\\n\";\n"],[1,"                answerSlots.push_back(testy);\n"],[0,"            "]],"start1":3327,"start2":3327,"length1":24,"length2":70},{"diffs":[[0,"ots;\n}\n\n"],[1,"/* Converts string integers to actual integers */\n\n"],[0,"string A"]],"start1":3515,"start2":3515,"length1":16,"length2":67}]],"length":4410,"saved":false}
{"ts":1375292244054,"patch":[[{"diffs":[[0,"ser.h\"\n\n"],[1,"/* Injects permutations into the vector */\n\n"],[0,"void Alg"]],"start1":109,"start2":109,"length1":16,"length2":60},{"diffs":[[0,"   }\n}\n\n"],[1,"/* Creates permutations */\n\n"],[0,"void Alg"]],"start1":357,"start2":357,"length1":16,"length2":44},{"diffs":[[0,"   }\n}\n\n"],[1,"/* The constructor for the class */\n\n"],[0,"Algo::Al"]],"start1":904,"start2":904,"length1":16,"length2":53},{"diffs":[[0,"   \n"],[-1,"    /* TODO: Begin the proccess of testing stuff here */\n    \n"],[0,"    "]],"start1":2774,"start2":2774,"length1":70,"length2":8}]],"length":4457,"saved":false}
